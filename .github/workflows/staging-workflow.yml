name: 🚀 Sharbo ECR-Lambda CI/CD Pipeline (Staged)

on:
  push:
    branches: [staging]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: sharbo-app
  LAMBDA_FUNCTION_NAME: sharbo-stage

permissions:
  contents: read

jobs:
  login:
    name: 🔐 AWS Login
    runs-on: ubuntu-latest
    steps:
      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔓 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

  deploy-to-ecr-and-lambda:
    name: 📦 Deploy to ECR and AWS Lambda
    needs: login
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔑 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔓 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: 🏗️ Build, Tag, and Push Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "📦 ECR Registry: $ECR_REGISTRY"
          echo "📦 ECR Repository: $ECR_REPOSITORY"
          echo "📦 Image URI: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
      - name: 🚀 Deploy to AWS Lambda
        run: |
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION_NAME \
            --image-uri ${{ steps.build-image.outputs.image }} \
            --region $AWS_REGION
    
      - name: 🧹 Clean up
        run: |
          rm $GITHUB_OUTPUT
          echo "🎉 Lambda function updated with image URI ${{ steps.build-image.outputs.image }}"