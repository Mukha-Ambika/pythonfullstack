name: Deploy to ECR and Host on Lambda

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1                     # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: sharbo-app                # set this to your Amazon ECR repository name
  LAMBDA_FUNCTION_NAME: sharbo-stage        # set this to your AWS Lambda function name

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Log out of Docker Hub
      run: docker logout

    - name: Get latest image URI
      id: get-image-uri
      run: echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}"

    - name: Deploy to AWS Lambda
      run: |
        aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --image-uri ${{ steps.get-image-uri.outputs.image }} --region ${{ env.AWS_REGION }}

    - name: Clean up
      run: |
        rm $GITHUB_OUTPUT
        echo "Lambda function updated with image URI ${{ steps.get-image-uri.outputs.image }}"
